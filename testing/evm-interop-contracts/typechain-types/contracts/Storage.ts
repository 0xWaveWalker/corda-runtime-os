/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Storage {
  export type Struct4Struct = { x4: BigNumberish };

  export type Struct4StructOutput = [x4: bigint] & { x4: bigint };

  export type Struct3Struct = {
    x3: BigNumberish;
    struct4: Storage.Struct4Struct;
  };

  export type Struct3StructOutput = [
    x3: bigint,
    struct4: Storage.Struct4StructOutput
  ] & { x3: bigint; struct4: Storage.Struct4StructOutput };

  export type Struct2Struct = {
    x2: BigNumberish;
    struct3: Storage.Struct3Struct;
  };

  export type Struct2StructOutput = [
    x2: bigint,
    struct3: Storage.Struct3StructOutput
  ] & { x2: bigint; struct3: Storage.Struct3StructOutput };

  export type Struct1Struct = {
    x1: BigNumberish;
    struct2: Storage.Struct2Struct;
  };

  export type Struct1StructOutput = [
    x1: bigint,
    struct2: Storage.Struct2StructOutput
  ] & { x1: bigint; struct2: Storage.Struct2StructOutput };
}

export interface StorageInterface extends Interface {
  getFunction(
    nameOrSignature: "retrieve" | "retrieveStruct" | "store"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "retrieve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "retrieveStruct",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "store",
    values: [BigNumberish, Storage.Struct1Struct]
  ): string;

  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "retrieveStruct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "store", data: BytesLike): Result;
}

export interface Storage extends BaseContract {
  connect(runner?: ContractRunner | null): Storage;
  waitForDeployment(): Promise<this>;

  interface: StorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  retrieve: TypedContractMethod<[], [bigint], "view">;

  retrieveStruct: TypedContractMethod<
    [name: AddressLike],
    [Storage.Struct1StructOutput],
    "view"
  >;

  store: TypedContractMethod<
    [num: BigNumberish, name: Storage.Struct1Struct],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "retrieve"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "retrieveStruct"
  ): TypedContractMethod<
    [name: AddressLike],
    [Storage.Struct1StructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "store"
  ): TypedContractMethod<
    [num: BigNumberish, name: Storage.Struct1Struct],
    [void],
    "nonpayable"
  >;

  filters: {};
}
