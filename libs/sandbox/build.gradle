plugins {
    id 'corda.common-library'
    id 'corda.osgi-test-conventions'
    id 'com.r3.internal.gradle.plugins.r3Publish'
    id 'org.jetbrains.kotlin.jvm'
}

description 'Corda Sandbox'

configurations {
    cpks {
        canBeConsumed = false
    }
}

dependencies {
    compileOnly "org.osgi:org.osgi.service.component.annotations:$osgiScrAnnotationVersion"
    compileOnly "org.osgi:osgi.annotation:$osgiVersion"
    compileOnly "org.osgi:osgi.core:$osgiVersion"
    api "net.corda.kotlin:kotlin-stdlib-jdk8-osgi:$kotlinVersion"
    api "org.jetbrains.kotlin:kotlin-osgi-bundle:$kotlinVersion"
    implementation platform("net.corda:corda-api:$cordaApiVersion")
    implementation project(":libs:crypto:crypto-impl")
    implementation "net.corda:corda-install:$cordaVersion"
    implementation "net.corda:corda-packaging:$cordaVersion"
    implementation "net.corda:corda-serialization:$cordaVersion"
    implementation "org.slf4j:slf4j-api:$slf4jVersion"

    testImplementation "org.apache.felix:org.apache.felix.framework:$felixVersion"
    testImplementation "org.assertj:assertj-core:$assertjVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testRuntimeOnly "org.slf4j:slf4j-simple:$slf4jVersion"

    cpks project(path: 'sandbox-cpk-one', configuration: 'cordaCPK')
    cpks project(path: 'sandbox-cpk-two', configuration: 'cordaCPK')
    cpks project(path: 'sandbox-cpk-three', configuration: 'cordaCPK')

    integrationTestCompileOnly "org.osgi:org.osgi.service.cm:$osgiCmVersion"
    integrationTestCompileOnly "org.osgi:org.osgi.service.component:$osgiScrAnnotationVersion"
    integrationTestImplementation "net.corda:corda-application:$cordaVersion"
    integrationTestImplementation "org.osgi:org.osgi.test.junit5:$osgiTestJunit5Version"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.configadmin:$felixConfigAdminVersion"
    integrationTestRuntimeOnly "org.apache.felix:org.apache.felix.scr:$felixScrVersion"
    integrationTestRuntimeOnly "org.junit.jupiter:junit-jupiter-params:$junit5Version"
    integrationTestRuntimeOnly "org.junit.platform:junit-platform-launcher:$junitPlatformVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.function:$osgiUtilFunctionVersion"
    integrationTestRuntimeOnly "org.osgi:org.osgi.util.promise:$osgiUtilPromiseVersion"
}

def integrationTestResources = tasks.named('processIntegrationTestResources', ProcessResources) {
    from configurations.cpks
}